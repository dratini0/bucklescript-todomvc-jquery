// Generated by BUCKLESCRIPT VERSION 1.0.3 , PLEASE EDIT WITH CARE
'use strict';

var ArrayOps   = require("./arrayOps");
var Hashtbl    = require("bs-platform/lib/js/hashtbl");
var Pervasives = require("bs-platform/lib/js/pervasives");
var $$Array    = require("bs-platform/lib/js/array");
var $$String   = require("bs-platform/lib/js/string");
var Random     = require("bs-platform/lib/js/random");

function calcIdx(todos, idx) {
  Hashtbl.reset(idx);
  var f = function (i, t) {
    return Hashtbl.add(idx, t[/* id */1], i);
  };
  return $$Array.iteri(f, todos);
}

function getFilteredTodos(filterType, todos) {
  switch (filterType) {
    case 0 : 
        return todos;
    case 1 : 
        return ArrayOps.array_filter(function (x) {
                    return !x[/* completed */2];
                  }, todos);
    case 2 : 
        return ArrayOps.array_filter(function (x) {
                    return x[/* completed */2];
                  }, todos);
    
  }
}

function uuid() {
  var c = function () {
    return Pervasives.string_of_int(Random.$$int(9));
  };
  var c8 = function () {
    return $$String.concat("", $$Array.to_list($$Array.map(c, ArrayOps.array_range(8))));
  };
  return $$String.concat("-", $$Array.to_list($$Array.map(c8, ArrayOps.array_range(4))));
}

function pluralize(count, word) {
  if (count <= 1) {
    return word;
  }
  else {
    return word + "s";
  }
}

function store_set(namespace, data) {
  localStorage.setItem(namespace, JSON.stringify(data));
  return /* () */0;
}

function store_get(namespace) {
  return JSON.parse(localStorage.getItem(namespace));
}

exports.calcIdx          = calcIdx;
exports.getFilteredTodos = getFilteredTodos;
exports.uuid             = uuid;
exports.pluralize        = pluralize;
exports.store_set        = store_set;
exports.store_get        = store_get;
/* Hashtbl Not a pure module */
